import scatterPlot from './scatterPlot'
import linePlot from './linePlot'
import radialPlot from './radialPlot'
import radialPlot2 from './radialPlot'



     const div1 = "viz1";
     const div2 = "viz2";
     const div3 = "viz3";
     const div4 = "viz4";
     const div5 = "viz5";
     const div6 = "viz6";
     const div7 = "viz7";
     const div8 = "viz8";
     const div9 = "viz9";

      //set x and y value pointers and axis labels
      const xValue1 = d => d.temp;
      const xValue2 = d => d.hum;
      const xValue3 = d => d.windspeed;
      const xValue4 = d => d.dteday;
      const xValue5 = d => d.hr;
      const xLabel1 = 'Temperature';
      const xLabel2 = 'Humidity';
      const xLabel3 = 'Windspeed';
      const xLabel4 = 'Date';
      const yValue2 = d => d.casual;
      const yValue1 = d => d.registered;
      const yValue3 = d => d.cnt;
      const yValue4 = xValue1;
      const yLabel1 = 'Users';
      const yLabel2 = 'Users';
      const yLabel3 = 'Users';
      const yLabel4 = xLabel1;
      const pointSize = 2;
      const pointColor1 = "green";
      const pointColor2 = "blue";
      const pointColor3 = "grey";


      const margin = { left: 60, right: 10, top: 10, bottom: 60 };

      //initialize these variables in the Global Scope
      //so they can be accessed by any function
        var startDate, endDate;


      //row function to parse daily csv
      const row1 = d => {
          d.instant = +d.instant;
          d.dteday = new Date(d.dteday); //need to parse date
          d.season = +d.season;
          d.yr = +d.yr;
          d.mnth = +d.mnth;
          d.holiday = +d.holiday; //flag
          d.weekday = +d.weekday; //integer day of week (0-6)
          d.workingday = +d.workingday; //flag
          d.weathersit = +d.weathersit; //(1-4)
          d.temp = +d.temp;
          d.atemp = +d.atemp;
          d.hum = +d.hum;
          d.windspeed = +d.windspeed;
          d.casual = +d.casual;
          d.registered = +d.registered;
          d.cnt = +d.cnt;
          return d;
      };

      const row2 = d => {
          d.instant = +d.instant;
          d.dteday = new Date(d.dteday); //need to parse date
          d.hr = +d.hr;
          d.season = +d.season;
          d.yr = +d.yr;
          d.mnth = +d.mnth;
          d.holiday = +d.holiday; //flag
          d.weekday = +d.weekday; //integer day of week (0-6)
          d.workingday = +d.workingday; //flag
          d.weathersit = +d.weathersit; //(1-4)
          d.temp = +d.temp;
          d.atemp = +d.atemp;
          d.hum = +d.hum;
          d.windspeed = +d.windspeed;
          d.casual = +d.casual;
          d.registered = +d.registered;
          d.cnt = +d.cnt;
          return d;
      };

var dataHour =[],dataDay = [];  //initialize dataHour outside of function

d3.csv('data/hour.csv', row1, data => {

  dataHour = data
  //use nest to groupby day and rollup based on
  //parameter specific rollup parameters
  //(i.e., mean, max or sum)
  var nestbyday = d3.nest()
    			.key(d => d.dteday)
        	.rollup(function(d) {
            return{
              'dteday': new Date(d3.mean(d, e=>+e.dteday)),
              'season': d3.mean(d, e=>+e.season),
              'yr': d3.mean(d, e=>+e.yr),
              'mnth': d3.mean(d, e=>+e.mnth),
              'holiday': d3.mean(d, e=>+e.holiday),
              'weekday': d3.mean(d, e=>+e.weekday),
              'workingday': d3.mean(d, e=>+e.workingday),
              'weathersit': d3.max(d, e=>+e.weathersit),
              'temp': d3.mean(d, e=>+e.temp),
              'atemp': d3.mean(d, e=>+e.atemp),
              'hum': d3.mean(d, e=>+e.hum),
              'windspeed':d3.mean(d, e=>+e.windspeed),
              'casual': d3.sum(d, e=>+e.casual),
              'registered': d3.sum(d, e=>+e.registered),
              'cnt':  d3.sum(d, e=>+e.cnt)
            };
          })
         	.entries(data);
        //console.log(nestbyday);

        //unnest creates an array of objects from the
        //array of key:valueObject pairs generated by
        //d3.nest

        //unnest adapted from 		      //https://bl.ocks.org/SpaceActuary/723b26e187e6bbc2608f

      function unnest(data, children){
          var output=[];
          data.forEach((d,i)=>{
            output.push(d[children]);
            })
				return output;
        };

      dataDay = unnest(nestbyday, "value");
      //console.log(dataDay);

      startDate = d3.min(dataDay, d=>d.dteDay);
      endDate = d3.max(dataDay, d=>d.dteDay);
      console.log('date range'+ startDate,endDate);

  //render function for all visualizations
  const render =() => {

    //first row of grids

    //note that div1 labels do not correspond to
    //final sequence of charts
    scatterPlot(div1, {
      data:dataDay,
      xValue:xValue1,
      yValue:yValue1,
      xLabel:xLabel1,
      yLabel:yLabel1,
      colorValue:pointColor1,
      pointSize:pointSize,
      margin:margin
    });

    console.log("div1")

    scatterPlot(div2, {
      data:dataDay,
      xValue:xValue2,
      yValue:yValue1,
      xLabel:xLabel2,
      yLabel:yLabel1,
      colorValue:pointColor1,
      pointSize:pointSize,
      margin:margin
    });

    console.log("div2")

    scatterPlot(div3, {
      data:dataDay,
      xValue:xValue3,
      yValue:yValue1,
      xLabel:xLabel3,
      yLabel:yLabel1,
      colorValue:pointColor1,
      pointSize:pointSize,
      margin:margin
    });

    console.log("div3")

    radialPlot2(div4, {
      data:dataHour,
      hour:xValue5,
      yValue:yValue1,
      yLabel:yLabel1,
      colorValue:pointColor1,
      margin:margin
    });

    console.log("div4")

    //second row of grid
    scatterPlot(div5, {
      data:dataDay,
      xValue:xValue1,
      yValue:yValue2,
      xLabel:xLabel1,
      yLabel:yLabel2,
      colorValue:pointColor2,
      pointSize:pointSize,
      margin:margin
    });

    console.log("div5")

    scatterPlot(div6, {
      data:dataDay,
      xValue:xValue2,
      yValue:yValue2,
      xLabel:xLabel2,
      yLabel:yLabel2,
      colorValue:pointColor2,
      pointSize:pointSize,
      margin:margin
    });

    console.log("div6")

    scatterPlot(div7, {
      data:dataDay,
      xValue:xValue3,
      yValue:yValue2,
      xLabel:xLabel3,
      yLabel:yLabel2,
      colorValue:pointColor2,
      pointSize:pointSize,
      margin:margin
    });

    console.log("div7")

    radialPlot(div8, {
      data:dataHour,
      hour:xValue5,
      yValue:yValue2,
      yLabel:yLabel2,
      colorValue:pointColor2,
      margin:margin
    });

    console.log("div8")

    linePlot(div9, {
      data:dataDay,
      xValue:xValue4,
      yValue1:yValue1,
      yValue2:yValue2,
      xLabel:xLabel4,
      yLabel:"Users",
      colorValue:pointColor2,
      pointSize:pointSize,
      margin:margin
    });

    console.log("div9")

  };

  const year0 = document.getElementById("#year2011");
  const year1 = document.getElementById("year2012");
  const dayType0 = document.getElementById("dayTypeWorking");
  const dayType1 = document.getElementById("dayTypeNonWorking");
  const weatherSit1 = document.getElementById("weatherSit1");
  const weatherSit2 = document.getElementById("weatherSit2");
  const weatherSit3 = document.getElementById("weatherSit3");

  const echoFilterStatus =()=>{
    console.log("year0:"+year0.value);
    console.log("year1:"+year1.value);
    console.log("dayType0:"+dayType0.value);
    console.log("dayType1:"+dayType1.value);
    console.log("weatherSit1:"+weatherSit1.value);
    console.log("weatherSit2:"+weatherSit2.value);
    console.log("weatherSit3:"+weatherSit3.value);
  };
  echoFilterStatus
  //updateFilterStatus is called whenever
  //one of the html checkbox/toggle buttons
  //changes state.
  //it reads the state of all buttons,
  //and sets the filterStatus by pushing
  //the value corresponding to the toggle buttons
  //to an array fo
  function updateFilterStatus() {
    console.log("updatefilterStatus")
    echoFilterStatus
    //initialize filterStatus state
  let filterStatus = {
      year:[],
      dayType:[],
      weatherSit:[]
    };
    //read button states (variables initialized in local scope only)

    //set filterStatus for each button
    if (year0.value == 1) {filterStatus.year.push(0)};
    if (year1.value == 1) {filterStatus.year.push(1)};
    if (dayType0.value == 1) {filterStatus.dayType.push(0)};
    if (dayType1.value == 1) {filterStatus.dayType.push(1)};
    if (weatherSit1.value == 1) {filterStatus.dayType.push(1)};
    if (weatherSit2.value == 1) {filterStatus.dayType.push(2)};
    if (weatherSit3.value == 1) {filterStatus.dayType.push(3)};
    echoFilterStatus
    console.log("button status");
    console.log(year0,year1,dayType0,dayType1,weatherSit1,weatherSit2,weatherSit3);
    console.log(filterStatus);

    // filterData adds/sets the filter opacity
    // for each record in the dataDay and dataHour
    // data sets, based on the filterStatus
    // (from html buttons),
    // startDate and endDate (from line chart brush)
    // uses forEach array property to set
    // filter status to 1 if specified column contains
    // any of the values contained in the corresponding
    // filterObjects array
      const filterData = () => {
        const setFilterOpacity= d => {
          //initialize filters to zero
          let f1=0, f2=0, f3=0, f4 =0;
          if (d.dteday >= startDate && d.dteday <= endDate){filter1 = 1};
          if (filterStatus.year.include(d.year)){filter2=1};
          if (filterStatus.dayType.include(d.workingday)){filter3=1};
          if (filterStatus.weatherSit.include(d.weathersit)){filter4=1};
          d.filterOpacity = (f1 * f2 * f3 * f4);
        };

        dataHour.forEach(setFilterOpacity);
        dataDay.forEach(setFilterOpacity);
      };

    //apply filters to hourly and daily data

    filterData();
    console.log(dataHour[0],dataDay[0])
    //render visualization
    render();
  };

  console.log('now render');
  render();

  console.log('resized and rendered...');
  window.addEventListener('resize',render);

  year0.addEventListener("change", updateFilterStatus);
  year1.addEventListener("click", updateFilterStatus);
  dayType0.addEventListener("click", updateFilterStatus);
  dayType1.addEventListener("click", updateFilterStatus);
  weatherSit1.addEventListener("click", updateFilterStatus);
  weatherSit2.addEventListener("click", updateFilterStatus);
  weatherSit3.addEventListener("click", updateFilterStatus);

});
